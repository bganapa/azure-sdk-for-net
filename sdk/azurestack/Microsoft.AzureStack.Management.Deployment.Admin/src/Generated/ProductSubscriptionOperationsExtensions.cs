// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Deployment.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProductSubscriptionOperations.
    /// </summary>
    public static partial class ProductSubscriptionOperationsExtensions
    {
            /// <summary>
            /// Unlocks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='duration'>
            /// Duration in TimeSpan format(Define which ISO format)
            /// </param>
            public static void Unlock(this IProductSubscriptionOperations operations, string location, string productId, string duration = default(string))
            {
                operations.UnlockAsync(location, productId, duration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unlocks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='duration'>
            /// Duration in TimeSpan format(Define which ISO format)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnlockAsync(this IProductSubscriptionOperations operations, string location, string productId, string duration = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnlockWithHttpMessagesAsync(location, productId, duration, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// locks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            public static void LockOperation(this IProductSubscriptionOperations operations, string location, string productId)
            {
                operations.LockOperationAsync(location, productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// locks the product subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='productId'>
            /// The product identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LockOperationAsync(this IProductSubscriptionOperations operations, string location, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LockOperationWithHttpMessagesAsync(location, productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
